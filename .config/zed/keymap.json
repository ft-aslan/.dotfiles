// Zed keymap

//

// For information on binding keys, see the Zed

// documentation: https://zed.dev/docs/key-bindings

//

// To see the default key bindings run `zed: open default keymap`

// from the command palette.

[
  // Better escape
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j k": "vim::NormalBefore", // In insert mode, make jk escape to normal mode.
      "j j": "vim::NormalBefore" // In insert mode, make jj escape to normal mode.
    }
  },
  {
    "context": "VimControl && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      "shift-l": ["workspace::SendKeystrokes", "$"],
      "shift-h": ["workspace::SendKeystrokes", "^"],
      "ctrl-shift-u": "vim::ScrollUp",
      "ctrl-shift-d": "vim::ScrollDown",
      "ctrl-u": ["workspace::SendKeystrokes", "ctrl-shift-u z z"],
      "ctrl-d": ["workspace::SendKeystrokes", "ctrl-shift-d z z"],
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"],
      "ctrl-shift-space": "editor::ShowInlineCompletion", // zed specific
      // Go to file with `gf`
      "g f": "editor::OpenExcerpts",
      // Search word under cursor
      "space s w": "pane::DeploySearch",
      // Toggle inlay hints
      "space u h": "editor::ToggleInlayHints",
      // Open markdown preview
      "space c p": "markdown::OpenPreview",
      "space c P": "markdown::OpenPreviewToTheSide",
      // Open recent project
      "space f p": "projects::OpenRecent",
      // Select next match with multi-cursor
      "g m": "vim::SelectNext"
    }
  },
  {
    // "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // "space s d": ""
      "space s k": "vim::OpenDefaultKeymap",
      "space s r": "search::ToggleReplace",
      "space s g": "pane::DeploySearch",

      "ctrl-a": "editor::SelectAll", // vim default: increment
      // paste last yanked text
      "space p": "editor::Paste",
      "space f t": "workspace::ToggleBottomDock",
      // +LSP
      "g r": "editor::FindAllReferences",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPrevDiagnostic",
      // Symbol search
      "space s s": "outline::Toggle",
      "space s S": "project_symbols::Toggle",
      "space c a": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      // Diagnostics
      "space s d": "diagnostics::Deploy",
      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPrevHunk",

      // + Buffers
      // Switch between buffers
      // "shift-h": "pane::ActivatePrevItem",
      // "shift-l": "pane::ActivateNextItem",
      "[ b": "pane::ActivatePrevItem",
      "] b": "pane::ActivateNextItem",
      // Close active panel
      "shift-q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem",
      "space b o": "pane::CloseInactiveItems",
      // Save file
      "ctrl-s": "workspace::Save",
      // File finder
      "space space": "file_finder::Toggle",
      // Show project panel with current file
      "space e": "pane::RevealInProjectPanel",
      "space shift-e": "workspace::ToggleLeftDock"
    }
  },
  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      "space space": "file_finder::Toggle",
      // Open recent project
      "space f p": "projects::OpenRecent"
    }
  },
  // Comment code
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      "g c": "editor::ToggleComments"
    }
  },
  // Toggle terminal
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-t": "workspace::ToggleBottomDock",
      "ctrl-\\": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-shift-t": "workspace::NewTerminal",
      "shift-q": "pane::CloseActiveItem",
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "shift-s": [
        "vim::PushOperator",
        {
          "AddSurrounds": {}
        }
      ]
    }
  },
  // Panel nagivation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-w l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-w k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-w j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  // Run nearest task
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      "space r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }]
    }
  },
  {
    // neo-tree.nvim compatibility
    "context": "ProjectPanel && not_editing",
    "bindings": {
      ":": "command_palette::Toggle",
      "a": "project_panel::NewFile",
      "/": "project_panel::NewSearchInDirectory",
      "A": "project_panel::NewDirectory",
      "y": "project_panel::Copy",
      "x": "project_panel::Cut",
      "p": "project_panel::Paste",
      "enter": "project_panel::OpenPermanent",
      "escape": "project_panel::ToggleFocus",
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrev",
      // "l": "project_panel::ExpandSelectedEntry",
      "l": "project_panel::OpenPermanent",
      "ctrl-l": "project_panel::ToggleFocus",
      "d": "project_panel::Trash",
      "r": "project_panel::Rename",
      "e": "project_panel::RevealInFileManager",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      "space g g": ["task::Spawn", { "task_name": "lazygit" }]
    }
  }
]
